# -*- coding: utf-8 -*-
"""Prototype Model 1.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iis5HPx7rN0PRVU1KI3N17cciOE2dmik

Joseph Bernardi, Avery Novick


To run, go to Runtime -> Run All


The sample listed for inputs is Microsoft, using a 2% long term growth rate (g).


Running the file too many times back to back may cause the API to return an error, as we are using the free version. If this happens, just wait for a couple minutes and then run it again.

**User Values (INPUT HERE!)**
"""

Stockname = 'MSFT'

# Risk Free Rate
rf_rate = 0.0158

# Beta
beta = 0.893

# Equity Risk Premium
eq_risk_premium = 0.0713

# Bloomberg WACC
bloomberg = 0.087

# Minority Interest
temp_min_interest = 0.087

# Tax Rate
tax_rate = 0.17

# Long Term Growth Rate
lt_growth_rate = 0.02

# Terminal Value EBITDA Multiple
ebitda_multiple = 11.6

# Share Count
share_count = 7571

"""# **WACC Model**


## Setup
"""

pip install alpha_vantage

print("Starting WACC Model")

# Import Libraries
import pandas as pd
import numpy as np
import json
import requests
import matplotlib.pyplot as plt
from alpha_vantage.timeseries import TimeSeries
import time



print("\nImportation of Libaries completed successfully")

"""## Latest WACC and Calculations/Cleaning


"""

API_KEY = '5XB896G8A8UEJL3D'

def pull_daily_time_series_alpha_vantage(alpha_vantage_api_key, ticker_name, output_size = "compact"):
    """
    Pull daily time series by stock ticker name.
    Args:
        alpha_vantage_api_key: Str. Alpha Vantage API key.
        ticker_name: Str. Ticker name that we want to pull.
        output_size: Str. Can be "full" or "compact". If "compact", then the past 100 days of data
        is returned. If "full" the complete time series is returned (could be 20 years' worth of data!)
    Outputs:
        data: Dataframe. Time series data, including open, high, low, close, and datetime values.
        metadata: Dataframe. Metadata associated with the time series.  
    """
    ts = TimeSeries(key = alpha_vantage_api_key, output_format = 'pandas')
    data, meta_data = ts.get_daily_adjusted(ticker_name, outputsize = output_size)
    data['date_time'] = data.index
    return data

def retrieve_data(function: str, symbol: str, api_key: str) -> dict:
    """
    Retrieves data from AlphaVantage's open API.
    Documentation located at: https://www.alphavantage.co/documentation
    """
    # query from API
    url = f'https://www.alphavantage.co/query?function={function}&symbol={symbol}&apikey={api_key}'
    response = requests.get(url)
    # read output
    data = response.text
    # parse output
    parsed = json.loads(data)
    
    return parsed

def get_latest_income_statement(symbol: str, api_key: str) -> dict:
    """
    Retrieves latest income statement of company specified in symbol.
    """
    income_statements = retrieve_data('INCOME_STATEMENT', symbol, api_key)['annualReports']
    latest_income_statement = income_statements[0]
    return latest_income_statement

def get_latest_balance_sheet(symbol: str, api_key: str) -> dict:
    """
    Retrieves latest income statement of company specified in symbol.
    """
    balance_sheets = retrieve_data('BALANCE_SHEET', symbol, api_key)['annualReports']
    latest_balance_sheet = balance_sheets[0]
    return latest_balance_sheet

def get_latest_cash_flow(symbol: str, api_key: str) -> dict:
    """
    Retrieves latest income statement of company specified in symbol.
    """
    cash_flows = retrieve_data('CASH_FLOW', symbol, api_key)['annualReports']
    latest_cash_flow = cash_flows[0]
    return latest_cash_flow

dailydata = pull_daily_time_series_alpha_vantage(API_KEY, Stockname)
IS_data = get_latest_income_statement(Stockname,API_KEY)
BS_data = get_latest_balance_sheet(Stockname,API_KEY)
CF_data = get_latest_cash_flow(Stockname,API_KEY)

daily = pd.DataFrame(dailydata)
IS = pd.DataFrame(IS_data, index=[0])
BS = pd.DataFrame(BS_data, index=[0])
CF = pd.DataFrame(CF_data, index=[0])

share_price = daily.iloc[0]['4. close']

dateOfClose = daily.iloc[0]['date_time']
dateOfClose = str(dateOfClose)
dateOfClose = dateOfClose[0:10]

daily

def WACC(BS,CF,IS):
    
  # Replace None values
  BS = BS.replace('None',0)
  CF = CF.replace('None',0)
  IS = IS.replace('None',0)

  total_assets = float(BS['totalAssets'])
  print("Total Assets: ", total_assets)

  total_liab = float(BS['totalLiabilities'])
  print("Total Liabilities: ", total_liab)

  book_value = total_assets - total_liab
  print("Book Value: ", book_value)

  # Net interest expense = interest expense - interest income
  interest_expense = float(IS['interestExpense'])
  interest_income = float(IS['interestIncome'])
  net_interest_expense = interest_expense - interest_income
  print("Net Interest Expense: ", net_interest_expense)

  currentportion_lt = float(BS['currentLongTermDebt'])
  print("Current portion of LT Debt: ", currentportion_lt)

  # Parts of Notes Payable Missing, set at 0
  payable_accrual = 0
  notes_payable = 0
  st_debt = float(BS['shortTermDebt'])
  print("ST Debt: ", st_debt)

  lt_debt = float(BS['longTermDebt'])
  print("LT Debt:" , lt_debt)

  cash = float(BS['cashAndShortTermInvestments'])
  print("Cash, Cash Equivalents & STI: ", cash)

  lt_investments = float(BS['longTermInvestments'])
  print("LT Investments:	", lt_investments)

  m_interest = temp_min_interest
  print("The Minority/Non Controlling Interest: ", m_interest)

            ## Input
  print("The Input Values are: ")

  # Calculate Cost of Equity from user inputs
  cost_of_equity = float(rf_rate) + (float(beta) * float(eq_risk_premium))

  #print("The Cost of Equity for ", Stockname, " is ", cost_of_equity)

            ## Debt
  print("\nThe Debt Values are:")

  # Total Debt
  total_debt = float(lt_debt) + float(currentportion_lt) + float(notes_payable)
  #print("Total deabt for", Stockname, " is ", total_debt)

            # Equity
  print("\nThe Equity Values are: ")

  # Enterprise Value
  enterprise_value = float(share_price) * float(share_count) + float(total_debt) - float(cash)
  print("the Enterprise value: ", enterprise_value)

  # equity value
  equity = float(enterprise_value) + float(cash) + float(lt_investments) + float(m_interest)
  print("the Equity Value: ", equity)

            ## WACC
    # Value

  # Debt and Equity 
  total_DE = equity + total_debt
  print("The total debt and equity: ", total_DE)

    # Weights
  equity_percent = equity / total_DE
  debt_percent = total_debt/total_DE
  print("equity %: ", equity_percent, "+ debt%:", debt_percent, " = ", equity_percent+debt_percent)

    # Cost

  #cost of debt
  c_debt = float(net_interest_expense) / float(book_value)
  print("cost of debt:",c_debt)

  # weighted cost
  w_equity = equity_percent * cost_of_equity
  print("Weighted equity:", w_equity)
  w_debt =  c_debt * debt_percent
  print("Weighted debt:", w_debt)
  w_cost = w_equity + w_debt
  print("\nThe total weighted cost is:", round(w_cost,2), "%")
  Wacc_average = round((float(bloomberg) + float(w_cost))/2, 4)
  print("Our WACC and Bloomberg's WACC Average is: ", Wacc_average, "%" )

  return Wacc_average

Wacc_average = WACC(BS,CF,IS)

WACC(BS,CF,IS)

"""## WACC Over Time"""

time.sleep(60)

# TESTING TIME SERIES DATA

def ISfunc(symbol: str, api_key: str) -> dict:
    income_statements = retrieve_data('INCOME_STATEMENT', symbol, api_key)['annualReports']
    return income_statements

def BSfunc(symbol: str, api_key: str) -> dict:
    balancesheets = retrieve_data('BALANCE_SHEET', symbol, api_key)['annualReports']
    return balancesheets

def CFfunc(symbol: str, api_key: str) -> dict:
    cashflow = retrieve_data('CASH_FLOW', symbol, api_key)['annualReports']
    return cashflow

IS_lst = ISfunc(Stockname, API_KEY)
BS_lst = BSfunc(Stockname, API_KEY)
CF_lst = CFfunc(Stockname, API_KEY)

year_lst = []
WACC_lst = []

i = 0
while i < len(BS_lst):
  
  BS_item = BS_lst[i]
  IS_item = IS_lst[i]
  CF_item = CF_lst[i]

  year = BS_item['fiscalDateEnding']
  year_lst.append(year)

  IS = pd.DataFrame(IS_item, index=[0])
  BS = pd.DataFrame(BS_item, index=[0])
  CF = pd.DataFrame(CF_item, index=[0])

  WACC_lst.append(WACC(BS,CF,IS))

  i += 1


wacc_dict = {'Fiscal Date':year_lst, 'WACC Average':WACC_lst}

WACC_df = pd.DataFrame(wacc_dict)
WACC_df = WACC_df[::-1]

WACC_df

ax = plt.gca()

WACC_df.plot(kind='line',x='Fiscal Date',y='WACC Average',ax=ax)
plt.rcParams["figure.figsize"] = (15,8)
plt.style.use('fivethirtyeight')

plt.show()

"""# **Forecasts**

## Setting up DataFrames
"""

time.sleep(60)

# CREATING FORECASTS

def threeTA_IS(symbol: str, api_key: str) -> dict:
    """
    Retrieves latest income statement of company specified in symbol.
    """
    income_statements = retrieve_data('INCOME_STATEMENT', symbol, api_key)['annualReports']
    latest_income_statements = income_statements[0:4]
    return latest_income_statements

def threeTA_BS(symbol: str, api_key: str) -> dict:
    """
    Retrieves latest income statement of company specified in symbol.
    """
    balance_sheets = retrieve_data('BALANCE_SHEET', symbol, api_key)['annualReports']
    latest_balance_sheets = balance_sheets[0:3]
    return latest_balance_sheets

def threeTA_CF(symbol: str, api_key: str) -> dict:
    """
    Retrieves latest income statement of company specified in symbol.
    """
    cash_flows = retrieve_data('CASH_FLOW', symbol, api_key)['annualReports']
    latest_cash_flows = cash_flows[0:3]
    return latest_cash_flows


IS_data = threeTA_IS(Stockname,API_KEY)
BS_data = threeTA_BS(Stockname,API_KEY)
CF_data = threeTA_CF(Stockname,API_KEY)

threeTA_IS = pd.DataFrame(IS_data)
threeTA_BS = pd.DataFrame(BS_data)
threeTA_CF = pd.DataFrame(CF_data)

# Replace None values
threeTA_BS = threeTA_BS.replace('None',0)
threeTA_CF = threeTA_CF.replace('None',0)
threeTA_IS = threeTA_IS.replace('None',0)

revchange = []
for item in threeTA_IS['totalRevenue']:
  item = float(item)
  revchange.append(item)

# Creating the Percent Revenue Growth Column, drops last row of actuals
revchange2 = revchange[::-1]

revchange3 = ([(b - a) / a for a, b in zip(revchange2[::1], revchange2[1::1])])

revchangefinal = revchange3[::-1]

threeTA_IS.drop(threeTA_IS.tail(1).index,inplace=True)

threeTA_IS['percentRevenueGrowth'] = revchangefinal

# REARRANGES ACTUAL DATA ROWS IN CORRECT CHRONOLOGICAL ORDER
threeTA_IS = threeTA_IS.iloc[::-1]
threeTA_BS = threeTA_BS.iloc[::-1]
threeTA_CF = threeTA_CF.iloc[::-1]

threeTA_IS

"""## Calculations

### Income Statement
"""

from operator import truediv

# Add projection rows
if len(threeTA_IS) < 5:
  threeTA_IS = threeTA_IS.append(pd.Series(name=3))
  threeTA_IS = threeTA_IS.append(pd.Series(name=4))
  threeTA_IS = threeTA_IS.append(pd.Series(name=5))
  threeTA_IS = threeTA_IS.append(pd.Series(name=6))
  threeTA_IS = threeTA_IS.append(pd.Series(name=7))
  threeTA_IS = threeTA_IS.reset_index()

# Convert necessary items to float
threeTA_IS['totalRevenue'] = pd.to_numeric(threeTA_IS['totalRevenue'], downcast="float")
threeTA_IS['costofGoodsAndServicesSold'] = pd.to_numeric(threeTA_IS['costofGoodsAndServicesSold'], downcast="float")
threeTA_IS['grossProfit'] = pd.to_numeric(threeTA_IS['grossProfit'], downcast="float")
threeTA_IS['sellingGeneralAndAdministrative'] = pd.to_numeric(threeTA_IS['sellingGeneralAndAdministrative'], downcast="float")
threeTA_IS['researchAndDevelopment'] = pd.to_numeric(threeTA_IS['researchAndDevelopment'], downcast="float")
threeTA_IS['otherNonOperatingIncome'] = pd.to_numeric(threeTA_IS['otherNonOperatingIncome'], downcast="float")
threeTA_IS['interestExpense'] = pd.to_numeric(threeTA_IS['interestExpense'], downcast="float")
threeTA_IS['interestIncome'] = pd.to_numeric(threeTA_IS['interestIncome'], downcast="float")
threeTA_IS['operatingIncome'] = pd.to_numeric(threeTA_IS['operatingIncome'], downcast="float")
threeTA_IS['incomeTaxExpense'] = pd.to_numeric(threeTA_IS['incomeTaxExpense'], downcast="float")
threeTA_IS['depreciationAndAmortization'] = pd.to_numeric(threeTA_IS['depreciationAndAmortization'], downcast="float")
threeTA_IS['ebit'] = pd.to_numeric(threeTA_IS['ebit'], downcast="float")
threeTA_IS['ebitda'] = pd.to_numeric(threeTA_IS['ebitda'], downcast="float")

avg_growthrate = ((threeTA_IS.at[0,'percentRevenueGrowth']) + (threeTA_IS.at[1,'percentRevenueGrowth']) + (threeTA_IS.at[2,'percentRevenueGrowth']))/3

# Revenue growth, total revenue, COGS, SG&A, R&D, Other Non Operating Income, Operating Expenses, Operating Income, Interest Expense & Income, Income Tax Expense, Income from Continuing Ops
iteratelst = [3,4,5,6,7]
for j in iteratelst:
  threeTA_IS.at[j,'percentRevenueGrowth'] = ((threeTA_IS.at[j-3,'percentRevenueGrowth'])+(threeTA_IS.at[j-2,'percentRevenueGrowth'])+(threeTA_IS.at[j-1,'percentRevenueGrowth']))/3
  threeTA_IS.at[j,'totalRevenue'] = (threeTA_IS.at[j-1,'totalRevenue']) * (1+(threeTA_IS.at[j-1,'percentRevenueGrowth']))
  threeTA_IS.at[j,'costofGoodsAndServicesSold'] = (threeTA_IS.at[j-1,'costofGoodsAndServicesSold']) * (1+(threeTA_IS.at[j-1,'percentRevenueGrowth']))
  threeTA_IS.at[j,'sellingGeneralAndAdministrative'] = ((threeTA_IS.at[j-3,'sellingGeneralAndAdministrative'])+(threeTA_IS.at[j-2,'sellingGeneralAndAdministrative'])+(threeTA_IS.at[j-1,'sellingGeneralAndAdministrative']))/3
  threeTA_IS.at[j,'researchAndDevelopment'] = ((threeTA_IS.at[j-3,'researchAndDevelopment'])+(threeTA_IS.at[j-2,'researchAndDevelopment'])+(threeTA_IS.at[j-1,'researchAndDevelopment']))/3
  threeTA_IS.at[j,'otherNonOperatingIncome'] = ((threeTA_IS.at[j-3,'otherNonOperatingIncome'])+(threeTA_IS.at[j-2,'otherNonOperatingIncome'])+(threeTA_IS.at[j-1,'otherNonOperatingIncome']))/3
  threeTA_IS.at[j,'operatingExpenses'] = -1*((threeTA_IS.at[j,'sellingGeneralAndAdministrative']) + (threeTA_IS.at[j,'researchAndDevelopment']))
  threeTA_IS.at[j,'operatingIncome'] = (threeTA_IS.at[j,'grossProfit']) + (threeTA_IS.at[j,'operatingExpenses'])# + Other operating income
  threeTA_IS.at[j,'interestExpense'] = ((threeTA_IS.at[j-3,'interestExpense'])+(threeTA_IS.at[j-2,'interestExpense'])+(threeTA_IS.at[j-1,'interestExpense']))/3
  threeTA_IS.at[j,'interestIncome'] = ((threeTA_IS.at[j-3,'interestIncome'])+(threeTA_IS.at[j-2,'interestIncome'])+(threeTA_IS.at[j-1,'interestIncome']))/3
  threeTA_IS.at[j,'incomeTaxExpense'] = ((threeTA_IS.at[j-3,'incomeTaxExpense'])+(threeTA_IS.at[j-2,'incomeTaxExpense'])+(threeTA_IS.at[j-1,'incomeTaxExpense']))
  threeTA_IS.at[j,'netIncomeFromContinuingOperations'] = (threeTA_IS.at[j,'incomeBeforeTax']) - (threeTA_IS.at[j,'incomeTaxExpense'])

# Cost of Revenue
cost_of_revenue = []
for i in threeTA_IS['costofGoodsAndServicesSold']:
  cost_of_revenue.append(-1*i)

threeTA_IS['CostOfRevenue'] = cost_of_revenue

# Gross Profit
for j in iteratelst:
  threeTA_IS.at[j,'grossProfit'] = (threeTA_IS.at[j-1,'totalRevenue']) + (threeTA_IS.at[j-1,'CostOfRevenue'])

# Gross Profit as % of Sales
grossprof=[]
totalrev=[]
for m in threeTA_IS['grossProfit']:
  grossprof.append(m)

for n in threeTA_IS['totalRevenue']:
  totalrev.append(n)

grossprof_sales = list(map(truediv, grossprof, totalrev))

threeTA_IS['grossProfitAsPercentOfSales'] = grossprof_sales

# Other Operating Income, Other Operating Expense, FOREIGN EXCHANGE GAIN/LOSS, Loss from Affiliates

# Net Interest Expense

intexpense = []
intincome = []
netintexpense = []

for a in threeTA_IS['interestExpense']:
  intexpense.append(a)
for b in threeTA_IS['interestIncome']:
  intincome.append(b)

for a,b in zip(intexpense, intincome):
  netintexpense.append(a-b)

threeTA_IS['netInterestExpense'] = netintexpense

# Non Operating Income

nonop_income=[]
other_nonop_income = []
for c in threeTA_IS['otherNonOperatingIncome']:
  other_nonop_income.append(c)

for b,c in zip(intexpense, other_nonop_income):
  nonop_income.append(b+c)

threeTA_IS['NonOperatingIncome'] = nonop_income

# Income before tax, depreciation and amortization, EBIT
for j in iteratelst:
  threeTA_IS.at[j,'incomeBeforeTax'] = (threeTA_IS.at[j,'operatingIncome']) - (threeTA_IS.at[j,'NonOperatingIncome'])
  threeTA_IS.at[j,'depreciationAndAmortization'] = ((threeTA_IS.at[j-3,'depreciationAndAmortization'])+(threeTA_IS.at[j-2,'depreciationAndAmortization'])+(threeTA_IS.at[j-1,'depreciationAndAmortization']))/3
  threeTA_IS.at[j,'ebit'] = ((threeTA_IS.at[j-3,'ebit'])+(threeTA_IS.at[j-2,'ebit'])+(threeTA_IS.at[j-1,'ebit']))/3
  threeTA_IS.at[j,'ebitda'] = ((threeTA_IS.at[j-3,'ebitda'])+(threeTA_IS.at[j-2,'ebitda'])+(threeTA_IS.at[j-1,'ebitda']))/3

threeTA_IS

"""### Balance Sheet"""

# Add projection rows
if len(threeTA_BS) < 5:
  threeTA_BS = threeTA_BS.append(pd.Series(name=3))
  threeTA_BS = threeTA_BS.append(pd.Series(name=4))
  threeTA_BS = threeTA_BS.append(pd.Series(name=5))
  threeTA_BS = threeTA_BS.append(pd.Series(name=6))
  threeTA_BS = threeTA_BS.append(pd.Series(name=7))
  threeTA_BS = threeTA_BS.reset_index()

# Convert necessary items to float
threeTA_BS['cashAndCashEquivalentsAtCarryingValue'] = pd.to_numeric(threeTA_BS['cashAndCashEquivalentsAtCarryingValue'], downcast="float")
threeTA_BS['cashAndShortTermInvestments'] = pd.to_numeric(threeTA_BS['cashAndShortTermInvestments'], downcast="float")
threeTA_BS['currentNetReceivables'] = pd.to_numeric(threeTA_BS['currentNetReceivables'], downcast="float")
threeTA_BS['propertyPlantEquipment'] = pd.to_numeric(threeTA_BS['propertyPlantEquipment'], downcast="float")
threeTA_BS['accumulatedDepreciationAmortizationPPE'] = pd.to_numeric(threeTA_BS['accumulatedDepreciationAmortizationPPE'], downcast="float")
threeTA_BS['totalAssets'] = pd.to_numeric(threeTA_BS['totalAssets'], downcast="float")
threeTA_BS['totalCurrentAssets'] = pd.to_numeric(threeTA_BS['totalCurrentAssets'], downcast="float")
threeTA_BS['totalNonCurrentAssets'] = pd.to_numeric(threeTA_BS['totalNonCurrentAssets'], downcast="float")
threeTA_BS['totalCurrentLiabilities'] = pd.to_numeric(threeTA_BS['totalCurrentLiabilities'], downcast="float")
threeTA_BS['longTermDebt'] = pd.to_numeric(threeTA_BS['longTermDebt'], downcast="float")
threeTA_BS['otherNonCurrrentAssets'] = pd.to_numeric(threeTA_BS['otherNonCurrrentAssets'], downcast="float")
threeTA_BS['totalLiabilities'] = pd.to_numeric(threeTA_BS['totalLiabilities'], downcast="float")
threeTA_BS['inventory'] = pd.to_numeric(threeTA_BS['inventory'], downcast="float")
threeTA_BS['intangibleAssets'] = pd.to_numeric(threeTA_BS['intangibleAssets'], downcast="float")
threeTA_BS['otherCurrentAssets'] = pd.to_numeric(threeTA_BS['otherCurrentAssets'], downcast="float")
threeTA_BS['otherNonCurrentLiabilities'] = pd.to_numeric(threeTA_BS['otherNonCurrentLiabilities'], downcast="float")
threeTA_BS['totalNonCurrentLiabilities'] = pd.to_numeric(threeTA_BS['totalNonCurrentLiabilities'], downcast="float")
threeTA_BS['treasuryStock'] = pd.to_numeric(threeTA_BS['treasuryStock'], downcast="float")
threeTA_BS['totalShareholderEquity'] = pd.to_numeric(threeTA_BS['totalShareholderEquity'], downcast="float")
threeTA_BS['retainedEarnings'] = pd.to_numeric(threeTA_BS['retainedEarnings'], downcast="float")
threeTA_BS['currentAccountsPayable'] = pd.to_numeric(threeTA_BS['currentAccountsPayable'], downcast="float")
threeTA_BS['commonStock'] = pd.to_numeric(threeTA_BS['commonStock'], downcast="float")



# INVENTORY, intangibleAssets, otherCurrentAssets

iteratelst = [3,4,5,6,7]

# Cash cash and STI
cash = []
sti = []
for j in iteratelst:
  threeTA_BS.at[j,'cashAndCashEquivalentsAtCarryingValue'] = ((threeTA_BS.at[j-3,'cashAndCashEquivalentsAtCarryingValue'])+(threeTA_BS.at[j-2,'cashAndCashEquivalentsAtCarryingValue'])+(threeTA_BS.at[j-1,'cashAndCashEquivalentsAtCarryingValue']))/3
  threeTA_BS.at[j,'cashAndShortTermInvestments'] = ((threeTA_BS.at[j-3,'cashAndShortTermInvestments'])+(threeTA_BS.at[j-2,'cashAndShortTermInvestments'])+(threeTA_BS.at[j-1,'cashAndShortTermInvestments']))/3
for i in threeTA_BS['cashAndCashEquivalentsAtCarryingValue']:
  cash.append(i)
for n in threeTA_BS['cashAndShortTermInvestments']:
  sti.append(n)
threeTA_BS['CashAndCashEquivAndSTI'] = np.add(cash,sti)
  
# accounts and notes receivable  (NO NOTES RECEIVABLE)
accounts_notes_receivable = []
for j in iteratelst:
  threeTA_BS.at[j,'currentNetReceivables'] = ((threeTA_BS.at[j-3,'currentNetReceivables'])+(threeTA_BS.at[j-2,'currentNetReceivables'])+(threeTA_BS.at[j-1,'currentNetReceivables']))/3
for i in threeTA_BS['currentNetReceivables']:
  accounts_notes_receivable.append(i)
threeTA_BS['AccountsAndNotesReceivable'] = accounts_notes_receivable

# inventory, intangibleAssets, otherCurrentAssets, Current Accounts Payable
for j in iteratelst:
  threeTA_BS.at[j,'inventory'] = ((threeTA_BS.at[j-3,'inventory'])+(threeTA_BS.at[j-2,'inventory'])+(threeTA_BS.at[j-1,'inventory']))/3
  threeTA_BS.at[j,'intangibleAssets'] = ((threeTA_BS.at[j-3,'intangibleAssets'])+(threeTA_BS.at[j-2,'intangibleAssets'])+(threeTA_BS.at[j-1,'intangibleAssets']))/3
  threeTA_BS.at[j,'otherCurrentAssets'] = ((threeTA_BS.at[j-3,'otherCurrentAssets'])+(threeTA_BS.at[j-2,'otherCurrentAssets'])+(threeTA_BS.at[j-1,'otherCurrentAssets']))/3
  threeTA_BS.at[j,'currentAccountsPayable'] = ((threeTA_BS.at[j-3,'currentAccountsPayable'])+(threeTA_BS.at[j-2,'currentAccountsPayable'])+(threeTA_BS.at[j-1,'currentAccountsPayable']))/3


# OTHER ST ASSETS ???  dont see any of that stuff

#TOTAL CURRENT ?? ALREADY THERE

# PP&E, NET
PPE = []
accum_dep = []
for j in iteratelst:
  threeTA_BS.at[j,'propertyPlantEquipment'] = ((threeTA_BS.at[j-3,'propertyPlantEquipment'])+(threeTA_BS.at[j-2,'propertyPlantEquipment'])+(threeTA_BS.at[j-1,'propertyPlantEquipment']))/3
  threeTA_BS.at[j,'accumulatedDepreciationAmortizationPPE'] = ((threeTA_BS.at[j-3,'accumulatedDepreciationAmortizationPPE'])+(threeTA_BS.at[j-2,'accumulatedDepreciationAmortizationPPE'])+(threeTA_BS.at[j-1,'accumulatedDepreciationAmortizationPPE']))/3
for i in threeTA_BS['propertyPlantEquipment']:
  PPE.append(i)
for i in threeTA_BS['accumulatedDepreciationAmortizationPPE']:
  accum_dep.append(i)
threeTA_BS['NET PP&E'] = np.add(PPE,accum_dep)

# TOTAL (NON)CURRENT ASSETS, TOTAL ASSETS IS THERE
for j in iteratelst:
  threeTA_BS.at[j,'totalAssets'] = ((threeTA_BS.at[j-3,'totalAssets'])+(threeTA_BS.at[j-2,'totalAssets'])+(threeTA_BS.at[j-1,'totalAssets']))/3
  threeTA_BS.at[j,'totalCurrentAssets'] = ((threeTA_BS.at[j-3,'totalCurrentAssets'])+(threeTA_BS.at[j-2,'totalCurrentAssets'])+(threeTA_BS.at[j-1,'totalCurrentAssets']))/3
  threeTA_BS.at[j,'totalNonCurrentAssets'] = ((threeTA_BS.at[j-3,'totalNonCurrentAssets'])+(threeTA_BS.at[j-2,'totalNonCurrentAssets'])+(threeTA_BS.at[j-1,'totalNonCurrentAssets']))/3

#Payable and accurals - no accounts payable, Accrued taxes, Intrest and dividends paybale, Other paybales and accrurals

#ST debt is there ???
# totalCurrentLiabilities, longTermDebt (LTdebt), otherNonCurrrentAssets, totalLiabilities, otherNonCurrentLiabilities, totalNonCurrentLiabilities is there
for j in iteratelst:
  threeTA_BS.at[j,'totalCurrentLiabilities'] = ((threeTA_BS.at[j-3,'totalCurrentLiabilities'])+(threeTA_BS.at[j-2,'totalCurrentLiabilities'])+(threeTA_BS.at[j-1,'totalCurrentLiabilities']))/3
  threeTA_BS.at[j,'longTermDebt'] = ((threeTA_BS.at[j-3,'longTermDebt'])+(threeTA_BS.at[j-2,'longTermDebt'])+(threeTA_BS.at[j-1,'longTermDebt']))/3
  threeTA_BS.at[j,'otherNonCurrrentAssets'] = ((threeTA_BS.at[j-3,'otherNonCurrrentAssets'])+(threeTA_BS.at[j-2,'otherNonCurrrentAssets'])+(threeTA_BS.at[j-1,'otherNonCurrrentAssets']))/3
  threeTA_BS.at[j,'totalLiabilities'] = ((threeTA_BS.at[j-3,'totalLiabilities'])+(threeTA_BS.at[j-2,'totalLiabilities'])+(threeTA_BS.at[j-1,'totalLiabilities']))/3
  threeTA_BS.at[j,'otherNonCurrentLiabilities'] = ((threeTA_BS.at[j-3,'otherNonCurrentLiabilities'])+(threeTA_BS.at[j-2,'otherNonCurrentLiabilities'])+(threeTA_BS.at[j-1,'otherNonCurrentLiabilities']))/3
  threeTA_BS.at[j,'totalNonCurrentLiabilities'] = ((threeTA_BS.at[j-3,'totalNonCurrentLiabilities'])+(threeTA_BS.at[j-2,'totalNonCurrentLiabilities'])+(threeTA_BS.at[j-1,'totalNonCurrentLiabilities']))/3

# other LT liabilities  ???

#Share capital and APIC - no APIC --> just commonStock
# retainedEarnings, treasuryStock, totalShareholderEquity, 
#equity b4 minority interist (TOTAl EQUITY) = commonStock + treasuryStock + totalShareholderEquity + retainedEarnings
cs = []
re = []
ts = []
tse = []
first = []
second = []
for j in threeTA_BS['commonStock']:
  cs.append(j)
for j in threeTA_BS['retainedEarnings']:
  re.append(j)
for j in threeTA_BS['treasuryStock']:
  ts.append(j)
for j in threeTA_BS['totalShareholderEquity']:
  tse.append(j)

first = np.add(cs,re)
second = np.add(ts,tse)
threeTA_BS['TotalEquity'] = np.add(first,second)

#total liabilities and equity
te = []
tl = []
for j in threeTA_BS['TotalEquity']:
  te.append(j)
for j in threeTA_BS['totalLiabilities']:
  tl.append(j)
threeTA_BS['TotalLiabilitiesAndEquity'] = np.add(te,tl)

 
threeTA_BS

"""### Cash Flow"""

# Add projection rows
if len(threeTA_CF) < 5:
  threeTA_CF = threeTA_CF.append(pd.Series(name=3))
  threeTA_CF = threeTA_CF.append(pd.Series(name=4))
  threeTA_CF = threeTA_CF.append(pd.Series(name=5))
  threeTA_CF = threeTA_CF.append(pd.Series(name=6))
  threeTA_CF = threeTA_CF.append(pd.Series(name=7))
  threeTA_CF = threeTA_CF.reset_index()

# Convert necessary items to float
threeTA_CF['capitalExpenditures'] = pd.to_numeric(threeTA_CF['capitalExpenditures'], downcast="float")

iteratelst = [3,4,5,6,7]

# Depreciation and Amortization, 
for j in iteratelst:
  threeTA_CF.at[j,'capitalExpenditures'] = ((threeTA_CF.at[j-3,'capitalExpenditures'])+(threeTA_CF.at[j-2,'capitalExpenditures'])+(threeTA_CF.at[j-1,'capitalExpenditures']))/3

  

threeTA_CF

"""# **DCF**

### Free Cash Flow Build Up
"""

pip install -U pip setuptools

pip install yearfrac

from datetime import datetime
import yearfrac as yf

free_CF_buildup = pd.DataFrame()

free_CF_buildup['ebitda'] = threeTA_IS['ebitda']

free_CF_buildup['ebit'] = threeTA_IS['ebit']

tax_rates = [.546,.102,.165,0,0,0,0,0] # MSFT, INPUT VALUES NEED TO BE CHANGED TO PAST 3 YEARS OF TAX RATES
free_CF_buildup['taxRates'] = tax_rates
for j in iteratelst:
  free_CF_buildup.at[j,'taxRates'] = ((free_CF_buildup.at[j-1,'taxRates'])+(free_CF_buildup.at[j-2,'taxRates'])+(free_CF_buildup.at[j-3,'taxRates']))/3

# NOPLAT, EBIT * (1-tax rate for given year)
noplat = [0,0,0,0,0,0,0,0]
free_CF_buildup['noplat'] = noplat
for i in range(8):
  free_CF_buildup.at[i,'noplat'] = (free_CF_buildup.at[i,'ebit']) * (1-(free_CF_buildup.at[i,'taxRates']))

free_CF_buildup['depreciation_amortization'] = threeTA_IS['depreciationAndAmortization']

free_CF_buildup['accounts_receivable'] = threeTA_BS['AccountsAndNotesReceivable']

free_CF_buildup['inventory'] = threeTA_BS['inventory']

free_CF_buildup['accounts_payable'] = threeTA_BS['currentAccountsPayable']

accrued_expenses = [6103,6830,7874,0,0,0,0,0] # MSFT, NEED TO FIND PLACE TO ACCESS THIS! HARD CODED FOR MSFT FOR NOW
free_CF_buildup['accrued_expenses'] = accrued_expenses
for j in iteratelst:
  free_CF_buildup.at[j,'accrued_expenses'] = ((free_CF_buildup.at[j-1,'accrued_expenses'])+(free_CF_buildup.at[j-2,'accrued_expenses'])+(free_CF_buildup.at[j-3,'accrued_expenses']))/3

free_CF_buildup['other_assets'] = threeTA_BS['otherCurrentAssets']

free_CF_buildup['other_noncurrent_liabilities'] = threeTA_BS['otherNonCurrentLiabilities']

# unlevered_cashflow, sum of noplat and everything under it
unlevered_cashflow = [0,0,0,0,0,0,0,0]
free_CF_buildup['unlevered_cashflow'] = unlevered_cashflow
for i in range(8):
  free_CF_buildup.at[i,'unlevered_cashflow'] = (free_CF_buildup.at[i,'noplat']) + (free_CF_buildup.at[i,'depreciation_amortization']) + free_CF_buildup.at[i,'accounts_receivable'] + (free_CF_buildup.at[i,'inventory']) + (free_CF_buildup.at[i,'accounts_payable']) + (free_CF_buildup.at[i,'accrued_expenses']) + (free_CF_buildup.at[i,'other_assets']) + (free_CF_buildup.at[i,'other_noncurrent_liabilities'])

free_CF_buildup['less_capital_expenditures'] = threeTA_CF['capitalExpenditures']

# unlevered_free_cashflow, take unlevered_cashflow and subtract less_capital_expenditures
unlevered_free_cashflow = [0,0,0,0,0,0,0,0]
free_CF_buildup['unlevered_free_cashflow'] = unlevered_free_cashflow
for i in range(8):
  free_CF_buildup.at[i,'unlevered_free_cashflow'] = free_CF_buildup.at[i,'unlevered_cashflow'] - free_CF_buildup.at[i,'less_capital_expenditures']

# discount_factor, number of years between investing today until the end of the 5 year projection

last_actual_date = threeTA_CF.at[2,'fiscalDateEnding']

newyear = int(last_actual_date[0:4]) + 5

enddate = str(newyear) + last_actual_date[4:]

y1 = int(dateOfClose[0:4])
m1 = int(dateOfClose[5:7])
d1 = int(dateOfClose[8:10])

y2 = int(enddate[0:4])
m2 = int(enddate[5:7])
d2 = int(enddate[8:10])

firstdate = datetime(y1,m1,d1)
seconddate = datetime(y2,m2,d2)

discount_factor = yf.yearfrac(firstdate, seconddate)

# present value of unlevered free cashflow, you are taking your unlevered free CF and ur dividing that number by (1+WACC) ^ projection year; projection year is 1-5 value based on which projection it is (ex. FY1 would be an exponent of 1)
presval_unlevered_free_cashflow = [0,0,0,0,0,0,0,0]
free_CF_buildup['presval_unlevered_free_cashflow'] = presval_unlevered_free_cashflow
for i in range(3):
  free_CF_buildup.at[i,'presval_unlevered_free_cashflow'] = free_CF_buildup.at[i,'unlevered_free_cashflow']

for y in iteratelst:
  free_CF_buildup.at[y,'presval_unlevered_free_cashflow'] = (free_CF_buildup.at[y,'unlevered_free_cashflow']) / ((1+ Wacc_average)**(y-2))

free_CF_buildup

"""### Perpetuity Approach"""

# Normalized FCF in last forecast period (time); this is just equal to your final projected year's unlevered free CF
normalized_fcf = free_CF_buildup.at[7,'unlevered_free_cashflow']

# Long term growth rate (g); complete ASSUMPTION - you want to use a value between 0 and 2 % (just set at 1%)
g = float(lt_growth_rate)

# Normalized FCF ^ (time + 1); taking first normalized FCF item and multiplying it by (1 + long term growth rate)
normalized_fcf_poweroftime = normalized_fcf * (1+g)

# Terminal Value (perpetuity); after the 5th projected year the company is worth this much in dollars; previous item (norm FCF ^ 1+time) divided by (WACC-long term growth rate)
terminal_value_perp = (normalized_fcf_poweroftime) / (Wacc_average - g)

# Present Value of Terminal Value (Perp); taking previous item (term value) divided by (1+WACC) ^ yearfrac (aka discount factor)
presval_terminal_value_perp = terminal_value_perp / ((1+Wacc_average) ** discount_factor)

# Present Value of Stage 1 Cash Flows (Perp); Taking sum of the present value of unlevered free CF (last line item in build up)
presval_stageone_cashflow_perp = free_CF_buildup['presval_unlevered_free_cashflow'].sum()

# Enterprise Value (Perp); Sum of previous two line items
enterprisevalue_perp = presval_terminal_value_perp + presval_stageone_cashflow_perp

"""### Exit EBITDA Multiple Approach"""

# Terminal Year Ebitda; equal to ebitda value from build up in the final projection year
terminal_year_ebitda = free_CF_buildup.at[7,'ebitda']

# Terminal value Ebitda multiple; not an assumption but deciding between 4 the four categories mentioned for ML
terminal_value_ebitda_multiple = ebitda_multiple

# Terminal Value (Ebitda); first two line items multiplied together
terminal_value_ebitda = float(terminal_year_ebitda) * float(terminal_value_ebitda_multiple)

# Present Value of Terminal Value (Ebitda); Terminal Value (Ebitda) * (1+WACC) ^ yearfrac (aka discount factor)
presval_terminal_value_ebitda = terminal_value_ebitda * ((1+Wacc_average)**discount_factor)

# Present Value of Stage 1 Values (Ebitda); Sum of unlevered_free_CF (all 8 years, given and projected years summed)
presval_stageone_values_ebitda = free_CF_buildup['unlevered_free_cashflow'].sum()

# Enterprise Value (Ebitda); Equal to the sum of the previous two items
enterprisevalue_ebitda = presval_terminal_value_ebitda + presval_stageone_values_ebitda

"""

### Net Debt"""

Cash_CashEquivalents_STI = threeTA_BS.at[2,'cashAndShortTermInvestments']
longterm_debt = threeTA_BS.at[2,'longTermDebt']
net_debt = longterm_debt - Cash_CashEquivalents_STI

shares_outstanding = threeTA_BS.at[2,'commonStockSharesOutstanding']

"""### Fair Value per share"""

colnames = ['approach','enterpriseValue', 'lessNetDebt', 'equityValue', 'shares', 'equityValuePerShare', 'marketPremium/DiscountToFairValue']
fairval = pd.DataFrame(columns=colnames)


# INDEX VALUES
### do each index value for both the perp and ebitda approach

fairval.at[0,'approach'] = 'Perpetuity'
fairval.at[1,'approach'] = 'Exit EBITDA Multiple'

# Enterprise value;
fairval.at[0,'enterpriseValue'] = enterprisevalue_perp
fairval.at[1,'enterpriseValue'] = enterprisevalue_ebitda

# Less, Net Debt; equal to negative net_debt FOR BOTH COLUMNS
fairval.at[0,'lessNetDebt'] = -1*net_debt
fairval.at[1,'lessNetDebt'] = -1*net_debt

# Equity Value; Sum of enterprise value and less net debt
fairval.at[0,'equityValue'] = enterprisevalue_perp + (-1*net_debt)
fairval.at[1,'equityValue'] = enterprisevalue_ebitda + (-1*net_debt)

# Shares; equal to shares_outstanding, EQUAL IN BOTH COLUMNS
fairval.at[0,'shares'] = int(shares_outstanding)
fairval.at[1,'shares'] = int(shares_outstanding)

# Equity value per share; dividing equity value by shares <- PROJECTED SHARE PRICEs
fairval.at[0,'equityValuePerShare'] = fairval.at[0,'equityValue'] / fairval.at[0,'shares']
fairval.at[1,'equityValuePerShare'] = fairval.at[1,'equityValue'] / fairval.at[1,'shares']

# Market Premium/(discount) to fair value; (current share price divided by equity value per share) - 1; if its a negative number its undervalued, if positive its overvalued
fairval.at[0,'marketPremium/DiscountToFairValue'] = (share_price / fairval.at[0,'equityValuePerShare']) - 1
fairval.at[1,'marketPremium/DiscountToFairValue'] = (share_price / fairval.at[1,'equityValuePerShare']) - 1

fairval

"""# **PROJECTIONS**"""

print("\nThe projected share price according to the Perpetuity Approach is:\n")
print(fairval.at[0,'equityValuePerShare'])

print("\nThe projected share price according to the Exit EBITDA Multiple Approach is:\n")
print(fairval.at[1,'equityValuePerShare'])

print("\nAccording to the Perpetuity Approach, the % change between the last closing price and the projection is:\n")
print(fairval.at[0,'marketPremium/DiscountToFairValue'] *100)

print("\nAccording to the Exit EBITDA Multiple Approach, the % change between the last closing price and the projection is:\n")
print(fairval.at[1,'marketPremium/DiscountToFairValue'] *100)